// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/kubernetes-incubator/service-catalog/pkg/client/clientset_generated/clientset/typed/servicecatalog/v1beta1"
	"k8s.io/client-go/rest"
)

type FakeServicecatalogV1beta1Interface struct {
	RESTClientStub        func() rest.Interface
	rESTClientMutex       sync.RWMutex
	rESTClientArgsForCall []struct{}
	rESTClientReturns     struct {
		result1 rest.Interface
	}
	rESTClientReturnsOnCall map[int]struct {
		result1 rest.Interface
	}
	ClusterServiceBrokersStub        func() v1beta1.ClusterServiceBrokerInterface
	clusterServiceBrokersMutex       sync.RWMutex
	clusterServiceBrokersArgsForCall []struct{}
	clusterServiceBrokersReturns     struct {
		result1 v1beta1.ClusterServiceBrokerInterface
	}
	clusterServiceBrokersReturnsOnCall map[int]struct {
		result1 v1beta1.ClusterServiceBrokerInterface
	}
	ClusterServiceClassesStub        func() v1beta1.ClusterServiceClassInterface
	clusterServiceClassesMutex       sync.RWMutex
	clusterServiceClassesArgsForCall []struct{}
	clusterServiceClassesReturns     struct {
		result1 v1beta1.ClusterServiceClassInterface
	}
	clusterServiceClassesReturnsOnCall map[int]struct {
		result1 v1beta1.ClusterServiceClassInterface
	}
	ClusterServicePlansStub        func() v1beta1.ClusterServicePlanInterface
	clusterServicePlansMutex       sync.RWMutex
	clusterServicePlansArgsForCall []struct{}
	clusterServicePlansReturns     struct {
		result1 v1beta1.ClusterServicePlanInterface
	}
	clusterServicePlansReturnsOnCall map[int]struct {
		result1 v1beta1.ClusterServicePlanInterface
	}
	ServiceBindingsStub        func(namespace string) v1beta1.ServiceBindingInterface
	serviceBindingsMutex       sync.RWMutex
	serviceBindingsArgsForCall []struct {
		namespace string
	}
	serviceBindingsReturns struct {
		result1 v1beta1.ServiceBindingInterface
	}
	serviceBindingsReturnsOnCall map[int]struct {
		result1 v1beta1.ServiceBindingInterface
	}
	ServiceInstancesStub        func(namespace string) v1beta1.ServiceInstanceInterface
	serviceInstancesMutex       sync.RWMutex
	serviceInstancesArgsForCall []struct {
		namespace string
	}
	serviceInstancesReturns struct {
		result1 v1beta1.ServiceInstanceInterface
	}
	serviceInstancesReturnsOnCall map[int]struct {
		result1 v1beta1.ServiceInstanceInterface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServicecatalogV1beta1Interface) RESTClient() rest.Interface {
	fake.rESTClientMutex.Lock()
	ret, specificReturn := fake.rESTClientReturnsOnCall[len(fake.rESTClientArgsForCall)]
	fake.rESTClientArgsForCall = append(fake.rESTClientArgsForCall, struct{}{})
	fake.recordInvocation("RESTClient", []interface{}{})
	fake.rESTClientMutex.Unlock()
	if fake.RESTClientStub != nil {
		return fake.RESTClientStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.rESTClientReturns.result1
}

func (fake *FakeServicecatalogV1beta1Interface) RESTClientCallCount() int {
	fake.rESTClientMutex.RLock()
	defer fake.rESTClientMutex.RUnlock()
	return len(fake.rESTClientArgsForCall)
}

func (fake *FakeServicecatalogV1beta1Interface) RESTClientReturns(result1 rest.Interface) {
	fake.RESTClientStub = nil
	fake.rESTClientReturns = struct {
		result1 rest.Interface
	}{result1}
}

func (fake *FakeServicecatalogV1beta1Interface) RESTClientReturnsOnCall(i int, result1 rest.Interface) {
	fake.RESTClientStub = nil
	if fake.rESTClientReturnsOnCall == nil {
		fake.rESTClientReturnsOnCall = make(map[int]struct {
			result1 rest.Interface
		})
	}
	fake.rESTClientReturnsOnCall[i] = struct {
		result1 rest.Interface
	}{result1}
}

func (fake *FakeServicecatalogV1beta1Interface) ClusterServiceBrokers() v1beta1.ClusterServiceBrokerInterface {
	fake.clusterServiceBrokersMutex.Lock()
	ret, specificReturn := fake.clusterServiceBrokersReturnsOnCall[len(fake.clusterServiceBrokersArgsForCall)]
	fake.clusterServiceBrokersArgsForCall = append(fake.clusterServiceBrokersArgsForCall, struct{}{})
	fake.recordInvocation("ClusterServiceBrokers", []interface{}{})
	fake.clusterServiceBrokersMutex.Unlock()
	if fake.ClusterServiceBrokersStub != nil {
		return fake.ClusterServiceBrokersStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.clusterServiceBrokersReturns.result1
}

func (fake *FakeServicecatalogV1beta1Interface) ClusterServiceBrokersCallCount() int {
	fake.clusterServiceBrokersMutex.RLock()
	defer fake.clusterServiceBrokersMutex.RUnlock()
	return len(fake.clusterServiceBrokersArgsForCall)
}

func (fake *FakeServicecatalogV1beta1Interface) ClusterServiceBrokersReturns(result1 v1beta1.ClusterServiceBrokerInterface) {
	fake.ClusterServiceBrokersStub = nil
	fake.clusterServiceBrokersReturns = struct {
		result1 v1beta1.ClusterServiceBrokerInterface
	}{result1}
}

func (fake *FakeServicecatalogV1beta1Interface) ClusterServiceBrokersReturnsOnCall(i int, result1 v1beta1.ClusterServiceBrokerInterface) {
	fake.ClusterServiceBrokersStub = nil
	if fake.clusterServiceBrokersReturnsOnCall == nil {
		fake.clusterServiceBrokersReturnsOnCall = make(map[int]struct {
			result1 v1beta1.ClusterServiceBrokerInterface
		})
	}
	fake.clusterServiceBrokersReturnsOnCall[i] = struct {
		result1 v1beta1.ClusterServiceBrokerInterface
	}{result1}
}

func (fake *FakeServicecatalogV1beta1Interface) ClusterServiceClasses() v1beta1.ClusterServiceClassInterface {
	fake.clusterServiceClassesMutex.Lock()
	ret, specificReturn := fake.clusterServiceClassesReturnsOnCall[len(fake.clusterServiceClassesArgsForCall)]
	fake.clusterServiceClassesArgsForCall = append(fake.clusterServiceClassesArgsForCall, struct{}{})
	fake.recordInvocation("ClusterServiceClasses", []interface{}{})
	fake.clusterServiceClassesMutex.Unlock()
	if fake.ClusterServiceClassesStub != nil {
		return fake.ClusterServiceClassesStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.clusterServiceClassesReturns.result1
}

func (fake *FakeServicecatalogV1beta1Interface) ClusterServiceClassesCallCount() int {
	fake.clusterServiceClassesMutex.RLock()
	defer fake.clusterServiceClassesMutex.RUnlock()
	return len(fake.clusterServiceClassesArgsForCall)
}

func (fake *FakeServicecatalogV1beta1Interface) ClusterServiceClassesReturns(result1 v1beta1.ClusterServiceClassInterface) {
	fake.ClusterServiceClassesStub = nil
	fake.clusterServiceClassesReturns = struct {
		result1 v1beta1.ClusterServiceClassInterface
	}{result1}
}

func (fake *FakeServicecatalogV1beta1Interface) ClusterServiceClassesReturnsOnCall(i int, result1 v1beta1.ClusterServiceClassInterface) {
	fake.ClusterServiceClassesStub = nil
	if fake.clusterServiceClassesReturnsOnCall == nil {
		fake.clusterServiceClassesReturnsOnCall = make(map[int]struct {
			result1 v1beta1.ClusterServiceClassInterface
		})
	}
	fake.clusterServiceClassesReturnsOnCall[i] = struct {
		result1 v1beta1.ClusterServiceClassInterface
	}{result1}
}

func (fake *FakeServicecatalogV1beta1Interface) ClusterServicePlans() v1beta1.ClusterServicePlanInterface {
	fake.clusterServicePlansMutex.Lock()
	ret, specificReturn := fake.clusterServicePlansReturnsOnCall[len(fake.clusterServicePlansArgsForCall)]
	fake.clusterServicePlansArgsForCall = append(fake.clusterServicePlansArgsForCall, struct{}{})
	fake.recordInvocation("ClusterServicePlans", []interface{}{})
	fake.clusterServicePlansMutex.Unlock()
	if fake.ClusterServicePlansStub != nil {
		return fake.ClusterServicePlansStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.clusterServicePlansReturns.result1
}

func (fake *FakeServicecatalogV1beta1Interface) ClusterServicePlansCallCount() int {
	fake.clusterServicePlansMutex.RLock()
	defer fake.clusterServicePlansMutex.RUnlock()
	return len(fake.clusterServicePlansArgsForCall)
}

func (fake *FakeServicecatalogV1beta1Interface) ClusterServicePlansReturns(result1 v1beta1.ClusterServicePlanInterface) {
	fake.ClusterServicePlansStub = nil
	fake.clusterServicePlansReturns = struct {
		result1 v1beta1.ClusterServicePlanInterface
	}{result1}
}

func (fake *FakeServicecatalogV1beta1Interface) ClusterServicePlansReturnsOnCall(i int, result1 v1beta1.ClusterServicePlanInterface) {
	fake.ClusterServicePlansStub = nil
	if fake.clusterServicePlansReturnsOnCall == nil {
		fake.clusterServicePlansReturnsOnCall = make(map[int]struct {
			result1 v1beta1.ClusterServicePlanInterface
		})
	}
	fake.clusterServicePlansReturnsOnCall[i] = struct {
		result1 v1beta1.ClusterServicePlanInterface
	}{result1}
}

func (fake *FakeServicecatalogV1beta1Interface) ServiceBindings(namespace string) v1beta1.ServiceBindingInterface {
	fake.serviceBindingsMutex.Lock()
	ret, specificReturn := fake.serviceBindingsReturnsOnCall[len(fake.serviceBindingsArgsForCall)]
	fake.serviceBindingsArgsForCall = append(fake.serviceBindingsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("ServiceBindings", []interface{}{namespace})
	fake.serviceBindingsMutex.Unlock()
	if fake.ServiceBindingsStub != nil {
		return fake.ServiceBindingsStub(namespace)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.serviceBindingsReturns.result1
}

func (fake *FakeServicecatalogV1beta1Interface) ServiceBindingsCallCount() int {
	fake.serviceBindingsMutex.RLock()
	defer fake.serviceBindingsMutex.RUnlock()
	return len(fake.serviceBindingsArgsForCall)
}

func (fake *FakeServicecatalogV1beta1Interface) ServiceBindingsArgsForCall(i int) string {
	fake.serviceBindingsMutex.RLock()
	defer fake.serviceBindingsMutex.RUnlock()
	return fake.serviceBindingsArgsForCall[i].namespace
}

func (fake *FakeServicecatalogV1beta1Interface) ServiceBindingsReturns(result1 v1beta1.ServiceBindingInterface) {
	fake.ServiceBindingsStub = nil
	fake.serviceBindingsReturns = struct {
		result1 v1beta1.ServiceBindingInterface
	}{result1}
}

func (fake *FakeServicecatalogV1beta1Interface) ServiceBindingsReturnsOnCall(i int, result1 v1beta1.ServiceBindingInterface) {
	fake.ServiceBindingsStub = nil
	if fake.serviceBindingsReturnsOnCall == nil {
		fake.serviceBindingsReturnsOnCall = make(map[int]struct {
			result1 v1beta1.ServiceBindingInterface
		})
	}
	fake.serviceBindingsReturnsOnCall[i] = struct {
		result1 v1beta1.ServiceBindingInterface
	}{result1}
}

func (fake *FakeServicecatalogV1beta1Interface) ServiceInstances(namespace string) v1beta1.ServiceInstanceInterface {
	fake.serviceInstancesMutex.Lock()
	ret, specificReturn := fake.serviceInstancesReturnsOnCall[len(fake.serviceInstancesArgsForCall)]
	fake.serviceInstancesArgsForCall = append(fake.serviceInstancesArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("ServiceInstances", []interface{}{namespace})
	fake.serviceInstancesMutex.Unlock()
	if fake.ServiceInstancesStub != nil {
		return fake.ServiceInstancesStub(namespace)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.serviceInstancesReturns.result1
}

func (fake *FakeServicecatalogV1beta1Interface) ServiceInstancesCallCount() int {
	fake.serviceInstancesMutex.RLock()
	defer fake.serviceInstancesMutex.RUnlock()
	return len(fake.serviceInstancesArgsForCall)
}

func (fake *FakeServicecatalogV1beta1Interface) ServiceInstancesArgsForCall(i int) string {
	fake.serviceInstancesMutex.RLock()
	defer fake.serviceInstancesMutex.RUnlock()
	return fake.serviceInstancesArgsForCall[i].namespace
}

func (fake *FakeServicecatalogV1beta1Interface) ServiceInstancesReturns(result1 v1beta1.ServiceInstanceInterface) {
	fake.ServiceInstancesStub = nil
	fake.serviceInstancesReturns = struct {
		result1 v1beta1.ServiceInstanceInterface
	}{result1}
}

func (fake *FakeServicecatalogV1beta1Interface) ServiceInstancesReturnsOnCall(i int, result1 v1beta1.ServiceInstanceInterface) {
	fake.ServiceInstancesStub = nil
	if fake.serviceInstancesReturnsOnCall == nil {
		fake.serviceInstancesReturnsOnCall = make(map[int]struct {
			result1 v1beta1.ServiceInstanceInterface
		})
	}
	fake.serviceInstancesReturnsOnCall[i] = struct {
		result1 v1beta1.ServiceInstanceInterface
	}{result1}
}

func (fake *FakeServicecatalogV1beta1Interface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.rESTClientMutex.RLock()
	defer fake.rESTClientMutex.RUnlock()
	fake.clusterServiceBrokersMutex.RLock()
	defer fake.clusterServiceBrokersMutex.RUnlock()
	fake.clusterServiceClassesMutex.RLock()
	defer fake.clusterServiceClassesMutex.RUnlock()
	fake.clusterServicePlansMutex.RLock()
	defer fake.clusterServicePlansMutex.RUnlock()
	fake.serviceBindingsMutex.RLock()
	defer fake.serviceBindingsMutex.RUnlock()
	fake.serviceInstancesMutex.RLock()
	defer fake.serviceInstancesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServicecatalogV1beta1Interface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1beta1.ServicecatalogV1beta1Interface = new(FakeServicecatalogV1beta1Interface)
